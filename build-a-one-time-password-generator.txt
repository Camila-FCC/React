** start of index.html **

<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8" />
    <title>OTP Generator</title>
    <link rel="stylesheet" href="styles.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/18.3.1/umd/react.development.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.3.1/umd/react-dom.development.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/7.26.5/babel.min.js"></script>
    <script
      data-plugins="transform-modules-umd"
      type="text/babel"
      src="index.jsx"
    ></script>
</head>

<body>
    <div id="root"></div>
    <script
      data-plugins="transform-modules-umd"
      type="text/babel"
      data-presets="react"
      data-type="module"
    >
      import { OTPGenerator } from './index.jsx';
      ReactDOM.createRoot(document.getElementById('root')).render(<OTPGenerator />);
    </script>
</body>

</html>

** end of index.html **

** start of styles.css **

* {
  box-sizing: border-box;
}

body {
  text-align: justify;
  font-family: "Monospace";
}

h1 {
  text-align: center;
  font-size: 3.05rem;
  margin-top: 0;
}

h2 {
  margin-top: 2.6em;
  font-size: 1.38rem;
}

button {
  display: block;
  width: 50%;
  justify-self: center;
  font-size: 1.4rem;
  margin-top: 0;
  border: none;
  background-color: midnightBlue;
  color: lightgray;
  padding: 0.4em;
  /*font-size: 1.42em;*/
  border-radius: 3px;
}

button:active {
  background-color: lime;
  color: black;
}

button:focus, button:disabled {
  background-color: lightGrey;
  color: black;
}

/*
button:active, button:focus {
  font-size: 1.6rem;
}
*/

p/*, #password*/ {
  text-align: center;
}

/*
#no-seconds {
  display: block;
  text-align: justify;
}
*/

p/*, #no-seconds*/ {
  font-size: 1.2em;
}
/*
#password {
  margin-top: 1.86em;
  margin-bottom: 0;
  font-size: 2.1rem;
  background-color: crimson;
  color: white;
  border-radius: 3px;
}
*/

** end of styles.css **

** start of index.jsx **

const { useState, useEffect, useRef } = React;

export const OTPGenerator = () => {

  const [message, setMessage] = useState("");

  const [seconds, setSeconds] = useState(null);
  
  const [password, setPassword] = useState(null);

  const [btnDisabled, setBtnDisabled] = useState(false);

  const counterRef = useRef(null);

  const myRef = useRef(null);

  //const randomNum = parseInt(Math.random() * 10**6);
  const randomNum = String(Math.random()).substring(2,8);

  const stylePassword = {
    color: "white",
    backgroundColor: "crimson",
    marginTop: 1.86 + "em",
    marginBottom: 0,
    fontSize: 2.1 + "rem",
    borderRadius: 3 + "px",
    textAlign: "center"
  };

  const styleMsg = {
    /*display: "block",*/
    fontSize: 1.2 + "em",
    textAlign: "justify"
  };


  const HandleParagraph = () => {

    useEffect(() => {
      
      if (myRef.current) {
        
        myRef.current.style.display = "block";
      
      }
    }, []); 

    return <p id="otp-timer" ref={myRef} style={!btnDisabled ? styleMsg : null}>{seconds > 0 ? `Expires in: ${seconds} seconds` : message}</p>;
  
  }


  const handleCountdown = () => {

    if(counterRef.current) {

      clearInterval(counterRef.current);
    }

    setSeconds(5);
    setBtnDisabled(true);
    setPassword(randomNum);


    counterRef.current = setInterval(() => {
      
      setSeconds(prevSeconds => {
        if (prevSeconds <= 1) {
          
          clearInterval(counterRef.current);

          setMessage("OTP expired. Click the button to generate a new OTP.");

          setBtnDisabled(false);
          
          //clearInterval(counterRef.current);

          return 0;

        }
      
        return prevSeconds - 1;

      });
    }, 1000);
    
  }

  useEffect(() => {

    return () => {

      if (counterRef.current) {

        clearInterval(counterRef.current);

      }
    }
  }, []);


  return (
    <div className="container">
      <h1 id="otp-title">{"OTP Generator"}</h1>
      <h2 id="otp-display" style={btnDisabled ? stylePassword : null}>{btnDisabled ? password : "Click 'Generate OTP' to get a code"}</h2>
      <br />
      <br />
      {seconds !== null && <HandleParagraph />}
      <br />
      <br />
      <button id="generate-otp-button" onClick={handleCountdown} disabled={btnDisabled}>{"Generate OTP"}</button>
    </div>
  );
};

** end of index.jsx **

